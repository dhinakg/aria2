name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: macos-latest
    env:
      NON_RELEASE: 1

    steps:
    - uses: actions/checkout@v3
    - name: MacOS setup
      run: |
        brew install cppunit gettext openssl libssh2 c-ares sqlite3 \
          autoconf automake pkg-config libtool
        pip3 install sphinx
    - name: Setup clang
      run: |
        echo 'CC=clang' >> $GITHUB_ENV
        echo 'CXX=clang++' >> $GITHUB_ENV
    - name: Build
      run: |
        mkdir build-release
        cd build-release
        ln -s ../makerelease-osx.mk Makefile
        make
    - name: Ls
      run: ls -lsall src

  build-v2:
    runs-on: macos-latest
    env:
      NON_RELEASE: 1

    steps:
    - uses: actions/checkout@v3
    - name: MacOS setup
      run: |
        brew install cppunit gettext openssl libssh2 c-ares sqlite3 \
          autoconf automake pkg-config libtool
        pip3 install sphinx
    - name: Setup clang
      run: |
        echo 'CC=clang' >> $GITHUB_ENV
        echo 'CXX=clang++' >> $GITHUB_ENV
    - name: Build
      run: |
        mkdir build-release
        cd build-release
        ln -s ../makerelease-osx.mk Makefile
        make -j"$(sysctl -n hw.ncpu)"
    - name: Ls
      run: ls -lsall src

  build-v3:
    runs-on: macos-latest
    env:
      NON_RELEASE: 1

    steps:
    - uses: actions/checkout@v3
    - name: MacOS setup
      run: |
        brew install cppunit gettext openssl libssh2 c-ares sqlite3 \
          autoconf automake pkg-config libtool
        pip3 install sphinx-build
    - name: Setup clang
      run: |
        echo 'CC=clang' >> $GITHUB_ENV
        echo 'CXX=clang++' >> $GITHUB_ENV
    - name: Build
      run: |
        mkdir build-release
        cd build-release
        ln -s ../makerelease-osx.mk Makefile
        make deps -j"$(sysctl -n hw.ncpu)"
        make -j"$(sysctl -n hw.ncpu)"
    - name: Ls
      run: ls -lsall src

  build-docker:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
    - name: Linux setup
      run: |
        docker build -t aria2-mingw - < Dockerfile.mingw
        id=$(docker create aria2-mingw)
        docker cp $id:/aria2/src/aria2c.exe .
        docker rm -v $id
    - uses: actions/upload-artifact@v3
      with:
        path: aria2c.exe
