name: build

on: [push, pull_request, workflow_dispatch]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        os: [macos-12, macos-13, macos-14]
        deps_step:
          # - make deps
          # - make deps -j2
          # - make deps -j"$(sysctl -n hw.ncpu)"
          # - make zlib.build expat.build gmp.build cares.build sqlite.build libgpgerror.build && make libgcrypt.build && make libssh2.build
          # - make zlib.build expat.build gmp.build cares.build sqlite.build libgpgerror.build -j2 && make libgcrypt.build -j2 && make libssh2.build -j2
          - make zlib.build expat.build gmp.build cares.build sqlite.build libgpgerror.build -j"$(sysctl -n hw.ncpu)" && make libgcrypt.build -j"$(sysctl -n hw.ncpu)" && make libssh2.build -j"$(sysctl -n hw.ncpu)"
        build_step:
          # - make
          # - make -j2
          - make -j"$(sysctl -n hw.ncpu)"
      fail-fast: false

    runs-on: ${{ matrix.os }}
    env:
      NON_RELEASE: 1
    steps:
      - uses: actions/checkout@v4
      - name: Get tags
        run: git fetch --prune --unshallow --tags

      # - name: MacOS setup
      #   run: |
      #     brew install cppunit gettext openssl libssh2 c-ares sqlite3 \
      #       autoconf automake pkg-config libtool gnu-sed tree
      #     echo "/usr/local/opt/gnu-sed/libexec/gnubin" >> $GITHUB_PATH
      #     pip3 install sphinx
      - name: MacOS setup
        run: |
          brew install autoconf automake pkg-config libtool gnu-sed tree
          echo "/usr/local/opt/gnu-sed/libexec/gnubin" >> $GITHUB_PATH
      - name: Setup clang
        run: |
          echo 'CC=clang' >> $GITHUB_ENV
          echo 'CXX=clang++' >> $GITHUB_ENV
      - name: Setup build
        run: |
          autoreconf -i
          mkdir build-release
          cd build-release
          ln -s ../makerelease-osx.mk Makefile
      - name: Build Dependencies
        run: |
          cd build-release
          ${{ matrix.deps_step }}
      - name: Build
        run: |
          cd build-release
          ${{ matrix.build_step }}
      - uses: actions/upload-artifact@v4
        with:
          name: Build makefile ${{ matrix.os }} artifacts
          path: |
            build-release/aria2*.dmg
            build-release/aria2*.pkg
            build-release/aria2*.tar.bz2
    # - uses: actions/upload-artifact@v3
    #   with:
    #     name: Build makefile ${{ matrix.os }} artifacts
    #     path: build-release/

  build-docker:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Get tags
        run: git fetch --prune --unshallow --tags

      - name: Linux setup
        run: |
          docker build -t aria2-mingw - < Dockerfile.mingw
          id=$(docker create aria2-mingw)
          docker cp $id:/aria2/src/aria2c.exe .
          docker rm -v $id
      - uses: actions/upload-artifact@v4
        with:
          path: aria2c.exe
